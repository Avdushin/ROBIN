from email import message
from email.policy import default
from time import sleep
from turtle import delay
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv, find_dotenv

import logging, random, time, asyncio, os
import msgs
# bot keybords
import markups

# Find .env file
load_dotenv(find_dotenv())

# init
bot = Bot(token=os.getenv('BOT_TOKEN'), parse_mode="HTML")
dp = Dispatcher(bot)

""" HEANDLERS """
# /start
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_sticker(chat_id=message.from_user.id,
                            sticker=r"CAACAgIAAxkBAAEFg5li8qnCAwn8afnP9H1xPgVgxgEmZgACuAAD9wLID0YLnLTiTgs4KQQ")
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {0.first_name}!'.format(message.from_user),
    reply_markup = markups.main_menu, parse_mode='html')

# /info
@dp.message_handler(commands=['info'])
async def command_start(message: types.Message):
    me = await bot.get_me()
    await bot.send_message(message.from_user.id, f"–Ø <b><a href='https://t.me/{me.username}'>{me.first_name}</a></b>.\n–ú–æ–π –∞–≤—Ç–æ—Ä - <a href='https://github.com/avdushin'>Ananazz</a>!".format(bot.get_me()), parse_mode="html")

@dp.message_handler()
async def bot_message(message: types.Message):
    """ GAMES """
    # üé≤ DICE
    for s in msgs.dice_cmd:
        if message.text.lower().find(s.lower()) != -1:
            # await bot.send_dice(message.chat.id, emoji="üé≤")
            msg=await message.reply_dice(emoji='üé≤')
            alert = f'–¢—ã –≤—ã–±–∏–ª: <b>{msg.dice.value}</b>'
            sleep(3), await  bot.send_message(message.chat.id, alert)
            break
    # üé∞ CASINO
    for s in msgs.casino_cmd:
        if message.text.lower().find(s.lower()) != -1:
            # await bot.send_dice(message.chat.id, emoji="üé∞")
            msg=await message.reply_dice(emoji='üé∞')
            alert = f'–¢—ã –≤—ã–±–∏–ª: <b>{msg.dice.value}</b>'
            sleep(3), await  bot.send_message(message.chat.id, alert)
            break
        """ SPORT GAMES """
    # üéØ DART
    for s in msgs.dart_cmd:
        if message.text.lower().find(s.lower()) != -1:
            # await bot.send_dice(message.chat.id, emoji="üéØ")
            msg=await message.reply_dice(emoji='üéØ')
            alert = f'–¢—ã –≤—ã–±–∏–ª: <b>{msg.dice.value}</b>'
            sleep(3), await  bot.send_message(message.chat.id, alert)
            break
    # ‚öΩ FOOTBALL
    for s in msgs.football_cmd:
        if message.text.lower().find(s.lower()) != -1:
            # await bot.send_dice(message.chat.id, emoji="‚öΩ")
            msg=await message.reply_dice(emoji='‚öΩ')
            alert = f'–¢—ã –≤—ã–±–∏–ª: <b>{msg.dice.value}</b>'
            match msg.dice.value:
                case 3 | 4 | 5:
                    sleep(3), await  bot.send_message(message.chat.id, '–ì–û–õ!!!')
                case _:
                    sleep(3), await  bot.send_message(message.chat.id, '–ú–ò–ú–û =(')
            sleep(3), await  bot.send_message(message.chat.id, alert)
            break
    # üèÄ BASKETBALL
    for s in msgs.basketball_cmd:
        if message.text.lower().find(s.lower()) != -1:
            msg=await message.reply_dice(emoji='üèÄ')
            alert = f'–¢—ã –≤—ã–±–∏–ª: <b>{msg.dice.value}</b>'
            if msg.dice.value == 4 | 5:
                sleep(4), await  bot.send_message(message.chat.id, '–ü–û–ü–ê–õ!')
            else:
                sleep(4), await  bot.send_message(message.chat.id, '–ú–ò–ú–û!')
            await  bot.send_message(message.chat.id, alert)
            # await bot.send_dice(message.chat.id, emoji="üèÄ")
            break
    # ---üé≥ BOWLING ---
    for s in msgs.bowling_cmd:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_dice(message.chat.id, emoji="üé≥")
            break
    # ---GUESS THE NUMBER ---
    # if message.text == "GUESS THE NUMBER":
    #     r = random.randint(1, 100)
    #     await bot.send_message(message.chat.id, f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≥–∞–¥–∞—Ç—å –µ–≥–æ. –ù–∏–∫–∞–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫!')
    #     if message.text == r:
    #         await message.reply(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–≥–∞–¥–∞–ª!\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ: {r}!')
    #     else:
    #         await message.reply('–ù–µ —É–≥–∞–¥–∞–ª!')

        """ MEMES """
    for s in msgs.bruh:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_photo(message.from_user.id, photo='https://c.tenor.com/lTtsDp9dZ34AAAAC/biruh-bruh.gif')
            break
        """"–ö—Ä–∏—á–∞–ª–∫–∏"""
    # –¶–°–ö–ê
    for s in msgs.csk_cmd:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_dice(await bot.send_message(message.from_user.id, random.choice(msgs.csk_screem).format(message.from_user),
        parse_mode='html'))
            break
    # Spartak
    for s in msgs.spartak_cmd:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_dice(await bot.send_message(message.from_user.id, random.choice(msgs.spartak_screem).format(message.from_user),
        parse_mode='html'))
            break
    
    """ RANDOM """
    for s in msgs.smiles_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.smiles_answers)}'.format(message.from_user))
            break
    
    """ BAD WORDS """
    # suka check
    for s in msgs.suka_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.suka_answers)()}'.format(message.from_user))
            break
    # churk check
    for s in msgs.churka_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.churka_answers)}'.format(message.from_user))
            break
    # mutter at hole check
    for s in msgs.mutterhole_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.mutterhole_answers)}'.format(message.from_user))
            break
    # fk check
    for s in msgs.fcku_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.fcku_answers)}'.format(message.from_user))
            break
    # rfk check
    for s in msgs.rfk_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.rfk_answers)}'.format(message.from_user))
            break
    # --- SORRY ---
    for s in msgs.sry_list:
        if message.text.lower().find(s.lower()) != -1:
            await bot.send_message(message.from_user.id, f'{random.choice(msgs.sry_answers)}'.format(message.from_user))
            break

    match message.text:
        # --- General --- #
        case "‚óÄÔ∏è –ù–ê–ó–ê–î":
            await bot.send_message(message.from_user.id, '‚òëÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.format(message.from_user),
        reply_markup = markups.main_menu, parse_mode='html')
        # --- INFO --- #
        case "‚ÑπÔ∏è INFO":
            me = await bot.get_me()
            await bot.send_message(message.from_user.id, f"–Ø <b><a href='https://t.me/{me.username}'>{me.first_name}</a></b>.\n–ú–æ–π –∞–≤—Ç–æ—Ä - <a href='https://github.com/avdushin'>Ananazz</a>!".format(bot.get_me()), parse_mode="html")
        case "info":
            me = await bot.get_me()
            await bot.send_message(message.from_user.id, f"–Ø <b>{me.first_name}</b>.\n–ú–æ–π –∞–≤—Ç–æ—Ä - <a href='https://github.com/avdushin'>Ananazz</a>!".format(bot.get_me()), parse_mode="html")
        # --- GAMES --- üé≤üé∞üéØüèÄ‚öΩüé≥ # 
        case "üïπÔ∏è GAMES":
             await bot.send_message(message.from_user.id, 'üïπÔ∏è –î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å!!!'.format(message.from_user),
        reply_markup = markups.games_menu, parse_mode='html')
        case "‚óÄÔ∏è GAMES":
             await bot.send_message(message.from_user.id, 'üïπÔ∏è –ò–ì–†–´'.format(message.from_user),
        reply_markup = markups.games_menu, parse_mode='html')
        # --- üèÖ SPORT GAMES ---
        case "üèÖ SPORT GAMES":
             await bot.send_message(message.from_user.id, 'üèÖ SPORT GAMES'.format(message.from_user),
        reply_markup = markups.sport_menu, parse_mode='html')
        # --- üé∞ LUCK ---
        case "üé∞ LUCK":
             await bot.send_message(message.from_user.id, 'üé∞ LUCK'.format(message.from_user),
        reply_markup = markups.casino_menu, parse_mode='html')
        
        # --- –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è ---
        # case "–ß—É—Ä–∫–∞" | "—á—É—Ä–∫–∞" | "—á—É—Ä–∫–∞–∞" | "–¢—ã —á—É—Ä–∫–∞" | "—Ç—ã —á—É—Ä–∫–∞" :
        #      await bot.send_message(message.from_user.id, '–°–∞–º —Ç—ã —á—É—Ä–∫–∞ :('.format(message.from_user),
        # parse_mode='html')
        # case "–°—É–∫–∞" | "—Å—É–∫–∞" | "–¢—ã –°—É–∫–∞" | "—Ç—ã –°—É–∫–∞" | "—Ç—ã —Å—É–∫–∞":
        #      await bot.send_message(message.from_user.id, '–Ø –Ω–µ —Å—É–∫–∞, –∞ –∫–æ–±–µ–ª—å - —Ö–æ—á–µ—à—å —Ä–æ—Ç–∏–∫–æ–º –ø—Ä–æ–≤–µ—Ä—å —Ö–∞—Ö–∞—Ö–∞'.format(message.from_user),
        # parse_mode='html')
        # case "–ï–±–∞—Ç—å" | "–µ–±–∞—Ç—å" | "–ï–ø—Ç–∞—Ç—å" | "–µ–ø—Ç–∞—Ç—å" | "–Å–ø—Ç–∞—Ç—å" | "—ë–ø—Ç–∞—Ç—å":
        # case words:
        #     await bot.send_message(message.from_user.id, '–•—É—Ö'.format(message.from_user))
        #      await bot.send_message(message.from_user.id, f'{random.choice(msgs.eps)}'.format(message.from_user),
        # parse_mode='html')
        # case "–ò–¥–∏ –Ω–∞ —Ö—É–π" | "–∏–¥–∏ –Ω–∞ —Ö—É–π" | "–ò–¥–∏ –Ω–∞ —Ö—É–π!" | "–∏–¥–∏ –Ω–∞ —Ö—É–π!" | "–ü–æ—à–µ–ª –Ω–∞ —Ö—É–π" | "–ø–æ—à–µ–ª –Ω–∞ —Ö—É–π" | "–ü–æ—à–µ–ª –Ω–∞ —Ö—É–π!" | "–ø–æ—à–µ–ª –Ω–∞ —Ö—É–π!":
        #     await bot.send_message(message.from_user.id, '–°–ê–ú –ü–û–®–Å–õ –ù–ê –•–£–ô –ï–ë–õ–ê–ù!'.format(message.from_user),
        # parse_mode='html')
        # case "–ò–¥–∏ –≤ –∂–æ–ø—É" | "–∏–¥–∏ –≤ –∂–æ–ø—É":
        #     await bot.send_message(message.from_user.id, '–®–æ, –æ–ø—è—Ç—å?!'.format(message.from_user),
        # parse_mode='html')
        case "–ü–æ—à—ë–ª –≤ –∂–æ–ø—É" | "–ø–æ—à—ë–ª –≤ –∂–æ–ø—É" | "–ò–¥–∏ –≤ –æ—á–∫–æ" | "–∏–¥–∏ –≤ –æ—á–∫–æ":
            await bot.send_message(message.from_user.id, '–ê –¥–æ—Ä–æ–≥—É –ø–æ–∫–∞–∂–µ—à—å?))'.format(message.from_user),
        parse_mode='html')
        # case "–ú–∞—Ç—å –≤ –∫–∞–Ω–∞–≤–µ" | "–º–∞—Ç—å –≤ –∫–∞–Ω–∞–≤–µ" | "–¢–≤–æ—è –º–∞—Ç—å –≤ –∫–∞–Ω–∞–≤–µ" | "—Ç–≤–æ—è –º–∞—Ç—å –≤ –∫–∞–Ω–∞–≤–µ" | "–£ —Ç–µ–±—è –º–∞—Ç—å –≤ –∫–∞–Ω–∞–≤–µ" | "—É —Ç–µ–±—è –º–∞—Ç—å –≤ –∫–∞–Ω–∞–≤–µ":
        #     await bot.send_message(message.from_user.id, '–£-—É-—É –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–µ –ø–æ–≤–µ–∑–ª–æ... –Ω—É –¥—É–º–∞—é –±–∞—Ç—è —Ç–æ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª—Å—è üòÖ'.format(message.from_user),
        # parse_mode='html')
        # --- SORRY ---
        # case "–ø—Ä–æ—Å—Ç–∏" | "–≤—Å—ë –ø—Ä–æ—Å—Ç–∏" | "–Ω—É –ø—Ä–æ—Å—Ç–∏" | "–∏–∑–≤–∏–Ω–∏" | "–≤—Å—ë –∏–∑–≤–∏–Ω–∏" | "–Ω—É –∏–∑–≤–∏–Ω–∏":
        #     await bot.send_message(message.from_user.id, '–õ–∞–¥–Ω–æ, –±—ã–≤–µ—Ç...'.format(message.from_user),
        # parse_mode='html')
        # --- Happy ---
        case '–∞—Ö–∞—Ö–∞' | '–∞—Ö–∞' | '–∞—Ö–∞—Ö–∞—Ö–∞' | '—Ö–µ—Ö' | '–∞–∑–∞–∑–∞':
            await bot.send_photo(message.from_user.id, photo='https://www.anime-internet.com/content/images/size/w2000/wordpress/2021/02/c2180b854c81945835d05aad85a6d89b.jpg')
            await bot.send_message(message.from_user.id, '–ê—Ö–∞-—Ö–∞-—Ö–∞ —à–∏–∏–∏–∏–∏–∏—à'.format(message.from_user),
        parse_mode='html')
        case "—Ö–µ—Ö":
            await bot.send_message(message.from_user.id, '–ê–•–ê—Ö–∞ –¥–∞, —Ä–∂–æ–º–±–∞!'.format(message.from_user),
        parse_mode='html')
        case 'sheesh' | 'sheeesh' | 'sheeeesh' | 'sheeeeesh' | 'shish' | 'shiish' | 'shiiish' | '—à–∏—à' | '—à–∏–∏—à' | '—à–∏–∏–∏—à' | '—à–∏–∏–∏–∏—à' | '—à–∏–∏–∏–∏–∏—à' | '—à–∏–∏–∏–∏–∏–∏–∏–∏—à':
            await bot.send_photo(message.from_user.id, photo='https://www.anime-internet.com/content/images/size/w2000/wordpress/2021/02/c2180b854c81945835d05aad85a6d89b.jpg')
            await bot.send_message(message.from_user.id, '–ê—Ö–∞-—Ö–∞-—Ö–∞ —à–∏–∏–∏–∏–∏–∏—à'.format(message.from_user),
        parse_mode='html')
        # case 'bruh' | 'bruuh' | 'bruuuh' | 'bruuuuuh' | 'bruuuuuuh' | 'bruuuuuuuh' | '–±—Ä—É—Ö' | '–±—Ä–∞—Ö' | '–±—Ä–∞–∞–∞—Ö':
        #     return await bot.send_photo(message.from_user.id, photo='https://c.tenor.com/lTtsDp9dZ34AAAAC/biruh-bruh.gif')

    # if  msgs.words in message.text:
    #     bot.send_message(message.from_user.id, f'{is_part_in_list(message.text.lower(), msgs.words)}'.format(message.from_user),
    # parse_mode='html')